GENERAL
Afficher la bdd actuelle
	db
Afficher les collections présentent sur la bdd
	show collections
Basculer sur une autre bdd
	use <database>
Accéder à une autre bdd sans changer contexte
	db.getSiblingDB(<database>)
Retourne les infos décrivant le role de l'instance
	db.hello()
Active/Desactive l'usage de la télémetrie
	disableTelemetry()
	enableTelemetry()

CRUD
Insérer un document
	db.<collection>.insertOne()
Insérer plusieurs documents
	db.<collection>.insertMany()
Rechercher un ou plusieurs documents
	db.<collection>.find()
	db.<collection>.findOne()
//ex recherche par id
	db.<collection>.find({ _id: ObjectId("") })
//ex recherche de ville avec l'opérateur $in
	db.<collection>.find({ city: { $in: ["PHOENIX", "CHICAGO"] } })
Mettre à jour un document
	db.<collection>.updateOne(
		<filter>,
		<update>,
		{options})
//ex update du field subscribers de la bdd podcasts selon l'id
	db.podcasts.updateOne(
		{ _id: ObjectId("...") },
		{ $set: { subscribers: 98562 } })
//ex update de l'arrayfield hosts de la bdd podcast avec l'opérateur $push
	db.podcasts.updateOne({ _id: ObjectId("...")},
		{ $push: { hosts: "Nic Raboy" } })
//ex update d'un field topics de la bdd podcasts selon le titre avec un tableau de valeurs. Si field topics absent, création avec upsert 
	db.podcasts.updateOne(
		{ title: "The Developer Hub" },
		{ $set: { topics: ["databases", "MongoDB"] } },
		{ upsert: true })
//ex update de l'arrayfield diet de la bdd birds selon l'id avec un tableau de valeurs
	db.birds.updateOne(
    	{ _id: ObjectId("6268471e613e55b82d7065d7") },
    	{ $addToSet: { diet: { $each: ["newts", "opossum", "skunks", "squirrels"] } } }
	)
//ex update du field last_updated et incrémentation du field sightings de la bdd birds selon le common_name. Si fields last_updated & sightings absents, création avec upsert
	db.birds.updateOne(
  		{ common_name: "Robin Redbreast" },
  		{ 
    			$inc: { sightings: 1 },
    			$set: { last_updated: new Date() } 
  		},
  		{ upsert: true } 
	);
Mettre à jour plusieurs documents
	db.<collection>.updateMany()
//ex update de tous les documents de la bdd books ayant une publishedDate < $lt dont le status sera modifié, ou créé si absent, avec $set 
	db.books.updateMany(
  		{ publishedDate: { $lt: new Date("2019-01-01") } },
  		{ $set: { status: "LEGACY" } }
	)
//ex update de tous les documents de la bdd birds ayant un common_name == $in dont le field last_seen sera modifié, ou créé si absent, avec $set
	db.birds.updateMany(
  		{ common_name: { $in: ["Blue Jay", "Grackle"] } },
  		{ $set: { last_seen: new Date("2022-01-01") } }
	);
Modifier puis retourner le document
	db.<collection>.findAndModify()
//ex modification d'un document par _id avec incrémentation du field downloads et affichage de ce même document une fois modifié avec new
	db.podcasts.findAndModify({
		query: { _id: ObjectId("62c7361f4bf2017af21ccdde") },
		update: { $inc: { downloads: 1 } },
		new: true
	})
Remplacer un seul document
	db.<collection>.replaceOne(
		<filter>, 
		<replacement>, 
		{options})
Supprimer un document
	db.<collection>.deleteOne({ _id: Objectid("...") })
Supprimer plusieurs documents
	db.<collection>.deleteMany({<field>: <value>})

OPERATEURS
Attribuer une valeur à un field et le créé si absent
	$set
Attribuer une valeur à un arrayfield et le créé si absent
	$push
Si le document à modifier n'existe pas, créé le document avec les valeurs fournies
	upsert
Selectionner un document selon un field et une value
	$eq
Selectionner tous les documents selon un field et une value dans un tableau
	$in
Selectionner tous les documents ayant un tableau avec au moins une des valeurs renseignée
	$elemMatch
Selectionner tous les documents ayant dans une de leurs valeurs l'expression renseignée en tant que string
	$regex
//ex recherhe des documents de la bdd transactions ayant dans un tableau la value sell pour le field transaction_code et un amount < $lte
	db.transactions.find({
    		"transactions": {
        		$elemMatch: {
            			"transaction_code": "sell",
            			"amount": { $lte: 4500 }
        		}
    		} })
Opérateur greater than
	$gt
//ex recherche des documents de la bdd sales dont les items ont un price > $gt
	db.sales.find({ "items.price": { $gt: 50 } })
Opérateur greater than or equal to
	$gte
Opérateur less than
	$lt
Opérateur less than or equal to
	$lte
Opérateur and afin de cumuler les conditions
	$and
//ex recherche des documents de la bdd routes ayant pour valeur du field airline Southwest Airlines et dont la valeur du field stops est >= $gte
	db.routes.find({
		$and: [{ "airline": "Southwest Airlines" }, {"stops": {$gte: 1} }] })
//ex avec la même requete simplifiée
	db.routes.find({ "airline": "Southwest Airlines", "stops": {$gte: 1} })
Opérateur or afin de choisir plusieurs conditions
	$or
//ex recherche des documents de la bdd routes ayant pour valeur du field dst_airport ou src_airport == SEA
	db.routes.find({
		$or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] })
//ex d'une recherche des documents de la bdd routes avec de multiples paramètres $or et $and
	db.routes.find({
		$and: [
			{ $or: [
				{ dst_airport: "SEA" },
				{ src_airport: "SEA" }
			]},
			{ $or: [
				{ airline: "American Airlines"},
				{ airplane: 320 }
			]},
		]})
Expliciter $and dans cette situation car un json ne peut contenir une clé qu'une seule fois. Les suivantes écrasant la première. Sans $and dans cette situation, seul le second $or sera pris en compte

TRIER ET LIMITER RESULTATS
Trier les résultats par données croissantes
	sort({<field>: 1})
//ex d'une recherche des companies de la category "music" triés alphabétiquement par "name"
	db.companies.find({ category_code: "music" }).sort({ name: 1 });
//ex d'une recherche des sales triés par "date" 
	db.sales.find().sort({date: 1})
Trier les résultats par données décroissantes
	sort({<field>: -1})
//ex d'une recherche des sales du moins récent au plus récent ayant été réalisées en ligne et pour lesquelles un coupon a été utilisé
	db.sales.find({
    		"purchaseMethod": "Online",
    		"couponUsed": true
	}).sort({
    		"saleDate": -1
	})
Limiter les résultats d'une recherche
	limit()
//ex d'une recherche des companies de la category "music" triées par nombre d'employés de manière décroissante et dont les résultats sont limités à 3
	db.companies
  	.find({ category_code: "music" })
  	.sort({ number_of_employees: -1, _id: 1 })
  	.limit(3);
//ex d'une recherche des sales ayant eu lieu à Londres, avec pour items dans la commandes 3 valeurs et triées par date de vente du plus ancien au plus récent et limité à 3 résultats
	db.sales.find({
    		"storeLocation": "London",
    		"items.name": {
        		$in: ["laptop", "backpack", "printer paper"]
    		}
		}).sort({
    			"saleDate": -1
		}).limit(3)	
Inclure l'affichage d'un field lors de la recherche de document(s) afin de la rendre plus lisible ou alléger la requete
//ex d'une recherche des inspections ayant eu pour cible les entreprises du secteur restaurant et pour lesquelles l'ont voudrait afficher uniquement le nom du restaurant et le résultat de son inspection
	db.inspections.find(
  		{ sector: "Restaurant - 818" },
  		{ business_name: 1, result: 1 }
	)
Exclure l'affichage d'un field lors de la recherche de document(s) afin de la rendre plus lisible ou alléger la requete
//ex d'une recherche des inspections ayant eu pour résultat "Pass" ou "Warning" et pour lesquelles nous ne souhaiterions pas récupérer la date de l'inspection ou le code postal
	db.inspections.find(
  		{ result: { $in: ["Pass", "Warning"] } },
  		{ date: 0, "address.zip": 0 }
	)
Il n'est possible de combiner inclure et exclure uniquement lorsque l'ont veut cacher l'_id
//ex d'une recherche des inspections dans le secteur de la restauration pour laquelle nous voudrions afficher le nom de l'entreprise, le résultat du test mais pas l'_id du document
// Return all restaurant inspections - business name and result fields only
	db.inspections.find(
  		{ sector: "Restaurant - 818" },
  		{ business_name: 1, result: 1, _id: 0 }
	)
Compter le nombre de documents appartenant à une collection
	db.collection.countDocuments( <query>, <options> )
//ex d'une recherche du nombre de documents dont le field "tripduration" est > 120 et ayant un "usertype" Subscriber
	db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })
//ex d'une recherhe du nombre de documents dans la collection sales contenant un item.name "laptop" et dont le prix est < 600
	db.sales.countDocuments({
    	"items.name": "laptop",
    	"items.price": { $lt: 600 }
	})
Rechercher des documents avec compound et search
//ex d'une recherche des documents dans la collection birds devant contenir field dans habitat et pour lesquels la longueur d'ailes devrait être > 45
Un score est donné aux resultats avec une valeur de 5 afin de trier les documents par pertinence
$search {
  "compound": {
    "must": [{
      "text": {
        "query": "field",
        "path": "habitat"
      }
    }],
    "should": [{
      "range": {
        "gte": 45,
        "path": "wingspan_cm",
        "score": {"constant": {"value": 5}}
      }
    }]
  }
}
Grouper les documents recherchés avec facet
//ex d'une recherche dans la collection birds des documents ayant "Northern Cardinal" dans le champ common_name. Les résultats sont alors triés dans des buckets représentés par 4 période de dates (boundaries)
$searchMeta: {
    "facet": {
        "operator": {
            "text": {
            "query": ["Northern Cardinal"],
            "path": "common_name"
            }
        },
        "facets": {
            "sightingWeekFacet": {
                "type": "date",
                "path": "sighting",
                "boundaries": [ISODate("2022-01-01"), 
                    ISODate("2022-01-08"),
                    ISODate("2022-01-15"),
                    ISODate("2022-01-22")],
                "default" : "other"
            }
        }
    }
}

TRANSACTIONS ACID
Démarrer une session
	startSession()
Démarrer une transaction
	startTransaction()
Commit la transaction dans la bdd
	commitTransaction()
Annuler la transaction
	abortTransaction()